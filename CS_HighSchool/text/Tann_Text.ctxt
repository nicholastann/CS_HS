#BlueJ class context
comment0.params=
comment0.target=Tann_Text()
comment0.text=\r\n\ This\ constructor\ assigns\ this.text\ as\ a\ 0\ length\ char\ array.\r\n
comment1.params=text
comment1.target=Tann_Text(char[])
comment1.text=\r\n\ This\ constructor\ assigns\ this.text\ the\ same\ as\ the\ char[]\ parameter.\r\n\ @param\ A\ A\ char[]\ to\ initialize\ this.text\ as.\r\n
comment10.params=otherText
comment10.target=boolean\ myEquals(char[])
comment10.text=\r\n\ This\ method\ returns\ true\ if\ this.text\ is\ the\ same\ as\ the\ parameter\ otherText.\r\n\ Note\:\ This\ method\ always\ returns\ false\ if\ they\ are\ not\ the\ same\ length.\r\n\ @param\ A\ A\ char[]\ to\ compare\ to\ this.text.\r\n\ @return\ A\ boolean\ that\ is\ true\ if\ this.text\ and\ otherText\ are\ identical.\r\n
comment11.params=moreText
comment11.target=char[]\ myAddToStart(char[])
comment11.text=\r\n\ This\ method\ returns\ this.text\ after\ adding\ moreText\ to\ the\ start.\r\n\ Note\:\ This\ method\ will\ reassign\ this.text\ as\ a\ new\ char\ array.\r\n\ @param\ A\ A\ char[]\ named\ moreText\ to\ add\ to\ the\ start\ of\ this.text.\r\n\ @return\ Returns\ this.text\ after\ adding\ moreText\ to\ the\ start.\r\n
comment12.params=moreText
comment12.target=char[]\ myAddToEnd(char[])
comment12.text=\r\n\ This\ method\ updates\ this.text\ to\ include\ moreText\ at\ the\ end.\r\n\ Note\:\ This\ method\ will\ reassign\ this.text\ as\ a\ new\ char\ array.\r\n\ @param\ A\ A\ char[]\ to\ add\ to\ the\ end\ of\ this.text.\r\n\ @return\ Returns\ this.text\ after\ adding\ moreText\ to\ the\ start.\r\n
comment13.params=moreText\ index
comment13.target=char[]\ myInsert(char[],\ int)
comment13.text=\r\n\ This\ method\ updates\ this.text\ to\ include\ moreText\ starting\ at\ an\ index.\r\n\ Note\:\ This\ method\ will\ reassign\ this.text\ as\ a\ new\ char\ array.\r\n\ @param\ A\ A\ char[]\ to\ add\ to\ the\ end\ of\ this.text.\r\n\ @param\ B\ An\ index\ to\ use\ as\ the\ insertion\ place\ of\ moreText\ in\ this.text.\r\n\ @return\ Returns\ this.text\ after\ adding\ moreText\ to\ at\ the\ index.\r\n
comment14.params=someText
comment14.target=boolean\ myStartsWith(char[])
comment14.text=\r\n\ This\ method\ returns\ true\ if\ this.text\ starts\ with\ someText.\r\n\ Note\:\ This\ method\ always\ returns\ false\ if\ someText\ is\ longer\ than\ this.text.\r\n\ @param\ A\ A\ char[]\ to\ check\ if\ this.text\ starts\ with.\r\n\ @return\ A\ boolean\ that\ is\ true\ if\ this.text\ starts\ with\ someText.\r\n
comment15.params=someText
comment15.target=boolean\ myEndsWith(char[])
comment15.text=\r\n\ This\ method\ returns\ true\ if\ this.text\ ends\ with\ someText.\r\n\ Note\:\ This\ method\ always\ returns\ false\ if\ someText\ is\ longer\ than\ this.text.\r\n\ @param\ A\ A\ char[]\ to\ check\ if\ this.text\ ends\ with.\r\n\ @return\ A\ boolean\ that\ is\ true\ if\ this.text\ ends\ with\ someText.\r\n
comment16.params=someText
comment16.target=boolean\ contains(char[])
comment16.text=\r\n\ This\ method\ returns\ true\ if\ someText\ can\ be\ found\ anywhere\ inside\ of\ this.text.\r\n\ Note\:\ This\ method\ always\ returns\ false\ if\ someText\ is\ longer\ than\ this.text.\r\n\ @param\ A\ A\ char[]\ to\ check\ if\ this.text\ contains\ it.\r\n\ @return\ A\ boolean\ that\ is\ true\ if\ this.text\ contains\ someText.\r\n
comment17.params=oldChar\ newChar
comment17.target=char[]\ replace(char,\ char)
comment17.text=\r\n\ This\ method\ returns\ this.text\ after\ changing\ all\ oldChars\ to\ newChars.\r\n\ @param\ A\ An\ oldChar\ to\ replace\ with\ the\ newChar\ parameter.\r\n\ @param\ B\ A\ newChar\ to\ replace\ all\ oldChars\ with.\r\n\ @return\ Returns\ this.text\ after\ changing\ all\ oldChars\ to\ newChars.\r\n
comment18.params=start\ end
comment18.target=char[]\ subChars(int,\ int)
comment18.text=\r\n\ This\ method\ returns\ a\ part\ of\ this.text,\ from\ a\ start\ up\ to\ an\ end\ index.\r\n\ Note\:\ This\ method\ does\ NOT\ change\ the\ characters\ inside\ of\ this.text.\r\n\ Note\:\ Assume\ start\ and\ end\ are\ valid\ indexes\ for\ the\ length\ of\ this.text.\r\n\ @param\ A\ A\ start\ index\ (inclusive)\ to\ use\ for\ the\ return\ char[]\r\n\ @param\ A\ An\ end\ index\ (exclusive)\ to\ use\ for\ the\ return\ char[]\r\n\ @return\ A\ new\ char[]\ that\ is\ a\ part\ of\ this.text\ from\ start\ up\ to\ end.\r\n
comment19.params=splitLetter
comment19.target=char[][]\ split(char)
comment19.text=\ \r\n\ This\ method\ splits\ up\ this.text\ into\ a\ two-dimensional\ char\ array,\r\n\ where\ each\ 1D\ array\ in\ the\ 2D\ array\ contains\ a\ portion\ of\ this.text.\r\n\ Each\ portion\ contains\ this.text\ starts\ at\ zero\ or\ after\ the\ given\ char,\r\n\ and\ stops\ just\ before\ including\ the\ char\ parameter.\ This\ means\ that\r\n\ the\ resulting\ 2D\ char\ array\ does\ not\ contains\ any\ of\ the\ char\ param.\r\n\ Note\:\ If\ the\ char\ is\ not\ found\ in\ this.text,\ the\ 2D\ array\ will\ have\ a\r\n\ second\ dimensional\ length\ of\ zero.\ Also\ to\ note\:\ The\ resulting\ 2D\ array\r\n\ can\ have\ a\ different\ length\ for\ each\ 1D\ char\ array\ inside\ of\ it.\r\n\ @param\ A\ A\ character\ to\ use\ as\ the\ splitter\ for\ this.text.\r\n\ @return\ A\ 2D\ char\ array\ containing\ this.text\ split\ via\ the\ char\ param.\r\n
comment2.params=
comment2.target=char[]\ getText()
comment2.text=\r\n\ This\ method\ returns\ this.text.\r\n\ @return\ Returns\ this.text.\r\n
comment3.params=
comment3.target=void\ myPrint()
comment3.text=\r\n\ This\ method\ prints\ all\ of\ the\ characters\ in\ this.text.\r\n\ Note\:\ Use\ System.out.print,\ not\ System.out.println.\r\n
comment4.params=
comment4.target=int\ myLength()
comment4.text=\r\n\ This\ method\ returns\ the\ number\ of\ characters\ in\ this.text.\r\n\ @return\ An\ int\ that\ is\ the\ number\ of\ characters\ in\ this.text.\r\n
comment5.params=
comment5.target=int\ myVowelCount()
comment5.text=\r\n\ This\ method\ returns\ the\ number\ of\ vowel\ characters\ in\ this.text.\r\n\ Note\:\ The\ vowels\ counted\ are\:\ A,\ a,\ E,\ e,\ I,\ i,\ O,\ o,\ U,\ u.\r\n\ @return\ An\ int\ that\ is\ the\ number\ of\ vowel\ characters\ in\ this.text.\r\n
comment6.params=
comment6.target=boolean\ myIsEmpty()
comment6.text=\r\n\ This\ method\ returns\ a\ boolean\ that\ is\ true\ if\ this.text\ has\ a\ length\ of\ zero.\r\n\ @return\ A\ boolean\ that\ is\ true\ if\ this.text\ has\ a\ length\ of\ zero.\r\n
comment7.params=index
comment7.target=char\ myCharAt(int)
comment7.text=\r\n\ This\ method\ returns\ the\ character\ at\ an\ index\ of\ this.text.\r\n\ Note\:\ Assume\ that\ index\ is\ less\ than\ or\ equal\ to\ text's\ length.\r\n\ @param\ A\ An\ index\ to\ find\ a\ character\ in\ this.text.\r\n\ @return\ The\ character\ at\ the\ index\ inside\ of\ this.text.\r\n
comment8.params=c
comment8.target=int\ myFirstIndexOf(char)
comment8.text=\r\n\ This\ method\ returns\ the\ index\ of\ the\ first\ occurance\ of\ a\ char\ inside\ this.text.\r\n\ Note\:\ Returns\ -1\ if\ the\ character\ does\ not\ exist\ in\ this.text.\r\n\ @param\ A\ A\ char\ to\ find\ the\ first\ occurance\ of\ inside\ of\ this.text.\r\n\ @return\ The\ char\ at\ that\ index\ inside\ of\ this.text.\r\n
comment9.params=c
comment9.target=int\ myLastIndexOf(char)
comment9.text=\r\n\ This\ method\ returns\ the\ index\ of\ the\ last\ occurance\ of\ a\ char\ inside\ this.text.\r\n\ Note\:\ Returns\ -1\ if\ the\ character\ does\ not\ exist\ in\ this.text.\r\n\ @param\ A\ A\ char\ to\ find\ the\ first\ occurance\ of\ inside\ of\ this.text.\r\n\ @return\ The\ char\ at\ that\ index\ inside\ of\ this.text.\r\n
numComments=20
